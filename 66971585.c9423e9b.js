(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{73:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(6),o=(n(0),n(89)),i={id:"setup",title:"Setting It Up"},l={unversionedId:"sw/setup",id:"sw/setup",isDocsHomePage:!1,title:"Setting It Up",description:"There are a few steps to perform before ISOBlue 2.0 can collect and send data to",source:"@site/docs/sw/setup.md",permalink:"/docs/sw/setup",editUrl:"https://github.com/ISOBlue/isoblue.github.io/edit/master/v2-website/docs/sw/setup.md",sidebar:"someSidebar",previous:{title:"Flashing an Image",permalink:"/docs/sw/flashing"},next:{title:"Deployment",permalink:"/docs/misc/deploy"}},s=[{value:"Notes on systemd",id:"notes-on-systemd",children:[]},{value:"1. Check Internet Connectivity",id:"1-check-internet-connectivity",children:[{value:"In case it doesn&#39;t connect ...",id:"in-case-it-doesnt-connect-",children:[]}]},{value:"2. Setup SSH Connections",id:"2-setup-ssh-connections",children:[{value:"Generate SSH Keys",id:"generate-ssh-keys",children:[]},{value:"Setup SSH Forward",id:"setup-ssh-forward",children:[]},{value:"Setup SSH Tunnel",id:"setup-ssh-tunnel",children:[]}]},{value:"3. Verify Running Services",id:"3-verify-running-services",children:[]},{value:"Ok, What Now?",id:"ok-what-now",children:[]}],c={rightToc:s};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"There are a few steps to perform before ISOBlue 2.0 can collect and send data to\nthe Cloud.  The following sections assume that you have already flashed an\nISOBlue 2.0 image to the assembled hardware. They also serve as a basic\ndebugging steps for a malfunctioning ISOBlue 2.0."),Object(o.b)("h2",{id:"notes-on-systemd"},"Notes on systemd"),Object(o.b)("p",null,"ISOBlue 2.0 manages the scripts and programs using ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.freedesktop.org/wiki/Software/systemd/"}),"systemd"),". You can view\nall the services running by using this command:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"root@localhost:~# systemctl status\n")),Object(o.b)("p",null,"You can replace ",Object(o.b)("inlineCode",{parentName:"p"},"status")," with ",Object(o.b)("inlineCode",{parentName:"p"},"enable"),", ",Object(o.b)("inlineCode",{parentName:"p"},"disable"),", ",Object(o.b)("inlineCode",{parentName:"p"},"start"),", ",Object(o.b)("inlineCode",{parentName:"p"},"stop"),", ",Object(o.b)("inlineCode",{parentName:"p"},"restart"),",\netc., plus a service name to trigger different actions on a service."),Object(o.b)("p",null,"You can check the status and view the log of a service by running:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"root@localhost:~# journalctl -u name-of-service\n")),Object(o.b)("p",null,"Now, let's dive into configuring your ISOBlue 2.0."),Object(o.b)("h2",{id:"1-check-internet-connectivity"},"1. Check Internet Connectivity"),Object(o.b)("p",null,"ISOBlue 2.0 uses ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.freedesktop.org/software/libqmi/man/1.8.0/qmicli.1.html"}),"qmicli")," to setup the Internet connections. The network\ndevice is specified as ",Object(o.b)("inlineCode",{parentName:"p"},"wwan0"),". There are two ways to check for Internet\nconnectivity:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ping"))),Object(o.b)("p",null,"Check if you could get any responses after running ",Object(o.b)("inlineCode",{parentName:"p"},"ping google.com"),"."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ifconfig"))),Object(o.b)("p",null,"After you run ",Object(o.b)("inlineCode",{parentName:"p"},"ifconfig"),", you should be able to see that ",Object(o.b)("inlineCode",{parentName:"p"},"wwan0")," is already\nassociated with an IP address."),Object(o.b)("p",null,"In our testing, sometimes an ISOBlue 2.0 could try multiple IPs and then settle\ndown to one. This process sometimes takes up to several minutes."),Object(o.b)("p",null,"Once you are certain that your ISOBlue 2.0 has Internet, move on to the next\nsection."),Object(o.b)("h3",{id:"in-case-it-doesnt-connect-"},"In case it doesn't connect ..."),Object(o.b)("p",null,"A few things to check:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Are the antennas installed?"),Object(o.b)("li",{parentName:"ul"},"If the antennas are installed, are all connections (uFl to SMA, SMA to SMA)\ntightened?"),Object(o.b)("li",{parentName:"ul"},"Is the SIM card properly inserted?"),Object(o.b)("li",{parentName:"ul"},"If the SIM card is installed, are you certain you have a valid data plan?"),Object(o.b)("li",{parentName:"ul"},"Are you inside or outside? If you are inside, make sure your antennas are\ncloser to the windows.")),Object(o.b)("p",null,"If your answers are yes to the first four of these questions, then there are a\nfew things to try:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Run")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"root@localhost:~# udevadm trigger\n")),Object(o.b)("p",null,"This triggers the udev rule that setup the cellular module to connect to the\nInternet. Check using ",Object(o.b)("inlineCode",{parentName:"p"},"ifconfig")," to see if this helps."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"If the above doesn't help, run")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"root@localhost:~# qmicli -p -d /dev/cdc-wdm0 --wds-start-network=Broadband \\\n                  --client-no-release-cid\n")),Object(o.b)("p",null,"This should return message like ",Object(o.b)("inlineCode",{parentName:"p"},"Network has started"),". This means you have\nalready registered onto your network provider. Then run the following command\nto obtain a valid IP:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"root@localhost:~# dhclient wwan0\n")),Object(o.b)("h2",{id:"2-setup-ssh-connections"},"2. Setup SSH Connections"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.ssh.com/ssh/"}),"SSH")," plays a critical role for debugging and data streaming to Cloud in\nISOBlue 2.0. We have provided two default SSH related ",Object(o.b)("inlineCode",{parentName:"p"},"systemd")," services:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"ssh-forward.service"))),Object(o.b)("p",null,"This service performs SSH port forwarding from your ISOBlue 2.0's local SSH port\nto a port on a remote machine for debugging purposes. By default, the remote\nmachine username and domain is ",Object(o.b)("inlineCode",{parentName:"p"},"isoblue2@vip4.ecn.purdue.edu"),"."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"tunnel.service"))),Object(o.b)("p",null,"This service provides SSH tunneling for mirroring Kafka clusters between ISOBlue\n2.0 and the remote cluster. By default, the remote cluster username and domain is\n",Object(o.b)("inlineCode",{parentName:"p"},"yang@cloudradio39.ecn.purdue.edu"),"."),Object(o.b)("p",null,"Both services are located in ",Object(o.b)("inlineCode",{parentName:"p"},"/lib/systemd/system"),". You can change the remote\nmachine and cluster domains to your custom domains. You can use one remote\nmachine for both debugging as well as receiving Kafka messages. The following\nsteps assume that you have one debugging machine and one cluster machine that\nhas Kafka running."),Object(o.b)("h3",{id:"generate-ssh-keys"},"Generate SSH Keys"),Object(o.b)("p",null,"Run the following command to generate a set of SSH keys (",Object(o.b)("strong",{parentName:"p"},"use default location\nand use no password"),"):"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"root@localhost:~# ssh-keygen\n")),Object(o.b)("p",null,"Once the keys are generated, they will be located in ",Object(o.b)("inlineCode",{parentName:"p"},"~/.ssh"),"."),Object(o.b)("h3",{id:"setup-ssh-forward"},"Setup SSH Forward"),Object(o.b)("p",null,"Add the content of ",Object(o.b)("inlineCode",{parentName:"p"},"~/.ssh/id_rsa.pub")," from ISOBlue 2.0 to your remote debugging\nmachine's ",Object(o.b)("inlineCode",{parentName:"p"},"~/.ssh/authorized_keys"),"."),Object(o.b)("p",null,"Then you will run this on ISOBlue:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"root@localhost:~# ssh -NR *:SSHPORT:localhost:22 username@domain1\n")),Object(o.b)("p",null,"You will be prompted to type yes or no. Type yes to add the remote host to your\n",Object(o.b)("inlineCode",{parentName:"p"},"known_hosts"),". You only need to do it manually once."),Object(o.b)("p",null,"Note: ",Object(o.b)("inlineCode",{parentName:"p"},"SSHPORT")," is specified when you are building your image."),Object(o.b)("h3",{id:"setup-ssh-tunnel"},"Setup SSH Tunnel"),Object(o.b)("p",null,"Add the content of ",Object(o.b)("inlineCode",{parentName:"p"},"~/.ssh/id_rsa.pub")," on ISOBlue 2.0 to your remote machine's\n",Object(o.b)("inlineCode",{parentName:"p"},"~/.ssh/authorized_keys"),"."),Object(o.b)("p",null,"Then you will run this on ISOBlue:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"root@localhost:~/# ssh -NL localhost:BROKERPORT:domain2:9092 -L \\\n                  localhost:ZKPORT:domain2:2181 \\\n                  username@domain2\n")),Object(o.b)("p",null,"You will be prompted to type yes or no. Type yes to add the remote host to your\n",Object(o.b)("inlineCode",{parentName:"p"},"known_hosts"),". You only need to do it manually once."),Object(o.b)("p",null,"Note: ",Object(o.b)("inlineCode",{parentName:"p"},"BROKERPORT"),", ",Object(o.b)("inlineCode",{parentName:"p"},"ZKPORT")," are also specified when you build your image."),Object(o.b)("h2",{id:"3-verify-running-services"},"3. Verify Running Services"),Object(o.b)("p",null,"There are a few key ",Object(o.b)("inlineCode",{parentName:"p"},"systemd")," services that will be running after flashing\nprocess is completed as well as after each boot."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"gpsd.service"))),Object(o.b)("p",null,"This service connects to the USB GPS module and enables clients to fetch GPS\nrelated data. When you use ",Object(o.b)("inlineCode",{parentName:"p"},"journalctl -u gpsd")," to check its logs, you usually\nsee useful on whether this service is working or not. Typically, if it is\nworking, log message ",Object(o.b)("inlineCode",{parentName:"p"},"time to report a fix ...")," will occur once per second."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"broker.service")," and ",Object(o.b)("em",{parentName:"li"},"zookeeper.service"))),Object(o.b)("p",null,"The combination of these two services is the ",Object(o.b)("strong",{parentName:"p"},"heart")," of ISOBlue 2.0. ",Object(o.b)("strong",{parentName:"p"},"No\nbroker/zookeeper, no logging.")," The ",Object(o.b)("em",{parentName:"p"},"broker")," and ",Object(o.b)("em",{parentName:"p"},"zookeeper")," bring up and\nhandle the overall logging of CAN messages, GPS data and other debugging data.\nWe uses the prepackaged broker and zookeeper binaries provided by the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://kafka.apache.org/"}),"Apache\nKafka")," project. You can also use ",Object(o.b)("inlineCode",{parentName:"p"},"journalctl")," to check the statuses of these\ntwo services. The settings for ",Object(o.b)("em",{parentName:"p"},"broker")," and ",Object(o.b)("em",{parentName:"p"},"zookeeper")," are located in\n",Object(o.b)("inlineCode",{parentName:"p"},"/opt/kafka/config"),". The details for the settings can be found ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://kafka.apache.org/documentation/#configuration"}),"here"),"."),Object(o.b)("p",null,"A quick way to verify that the two services  are running is to check the folders\nin ",Object(o.b)("inlineCode",{parentName:"p"},"kafka-logs")," in ",Object(o.b)("inlineCode",{parentName:"p"},"/media/sda1"),". Within this directory, you will see a\nstructure that is familiar to this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"kafka-logs\n\u2514\u2500\u2500 remote-0\n\u2514\u2500\u2500 tra-0\n\u2514\u2500\u2500 imp-0\n\u2514\u2500\u2500 gps-0\n\u2514\u2500\u2500 ...\n")),Object(o.b)("p",null,"The folder name ",Object(o.b)("inlineCode",{parentName:"p"},"xxxx-0")," represents the Kafka topic name and within each of these\nfolders, you should be able see things like this after you run ",Object(o.b)("inlineCode",{parentName:"p"},"ls -alh"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"-rw-rw-r-- 1 root root  84K Nov 30 00:13 00000000000011544725.index\n-rw-r--r-- 1 root root  43M Nov 30 00:14 00000000000011544725.log\n-rw-rw-r-- 1 root root  74K Nov 30 00:14 00000000000011544725.timeindex\n")),Object(o.b)("p",null,"The file ends with ",Object(o.b)("inlineCode",{parentName:"p"},".log")," is the Kafka log that stores all the collected data.\nYou can keep checking whether the size of the file changes or not. This will\nquickly tell you statuses of the ",Object(o.b)("em",{parentName:"p"},"broker"),", ",Object(o.b)("em",{parentName:"p"},"zookeeper")," and other logging\nservices."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"mirror.service"))),Object(o.b)("p",null,"This service uses the SSH tunnel setup to forward ",Object(o.b)("inlineCode",{parentName:"p"},"debug")," and ",Object(o.b)("inlineCode",{parentName:"p"},"remote")," topic\nKafka message to a remote Kafka cluster residing in an OATS cluster. It requires\nnetwork connectivity for this service to work."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Important: make sure that the Kafka broker you'd like to mirror to is setup correctly. "),Object(o.b)("p",{parentName:"blockquote"},"Uncomment and set ",Object(o.b)("inlineCode",{parentName:"p"},"advertised.listeners")," to ",Object(o.b)("inlineCode",{parentName:"p"},"PLAINTEXT://<broker_host_IP:9092>")," in your Kafka\u2019s ",Object(o.b)("inlineCode",{parentName:"p"},"server.properties")," config file. By default the ISOBlue will try to resolve the server's ",Object(o.b)("em",{parentName:"p"},"hostname")," on which the Kafka broker resides. This will fail in most cases and prevent the mirror service from functioning correctly. See ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://rmoff.net/2018/08/02/kafka-listeners-explained/"}),"Kafka Listeners - Explained")," for an in-depth discussion about this topic. ")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"get-pgns.service"))),Object(o.b)("p",null,"This service runs ",Object(o.b)("inlineCode",{parentName:"p"},"get_pgns.sh")," script located in ",Object(o.b)("inlineCode",{parentName:"p"},"/opt/bin"),". The script fetches\na file that contains the list of PGNs and replaces the ",Object(o.b)("inlineCode",{parentName:"p"},"/opt/pgns")," every 5\nseconds. This file will be later parsed into a fitler by a program that logs CAN\ndata based on this filter."),Object(o.b)("p",null,"You can change the remote file location in ",Object(o.b)("inlineCode",{parentName:"p"},"get_pgns.sh")," as you wish. It also\nrequires a network connectivity to work."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"can-watchdog.service"))),Object(o.b)("p",null,"This service watches the presence of CAN activities. It is ",Object(o.b)("strong",{parentName:"p"},"not")," enabled by\ndefault. You can keep it disabled when you are configuring an ISOBlue 2.0 for\nthe first time. Remember to enable it once you are done setting up the ISOBlue.\nOtherwise, the device will keep running until you cut the power (or the power\nruns out)."),Object(o.b)("p",null,"You can also check the statuses and perform actions on all the other ISOBlue 2.0\nspecified services. The name and all ",Object(o.b)("inlineCode",{parentName:"p"},"systemd")," service file can be found\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ISOBlue/meta-isoblue/tree/master/recipes-core/systemd/systemd"}),"here"),"."),Object(o.b)("h2",{id:"ok-what-now"},"Ok, What Now?"),Object(o.b)("p",null,"At this point, you should have a fully functional ISOBlue 2.0. Can you see your\nISOBlue 2.0 showing up on ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/OpenATK/ISOBlueApp"}),"ISOBlueApp"),"?"))}b.isMDXComponent=!0},89:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=b(n),d=a,h=p["".concat(i,".").concat(d)]||p[d]||u[d]||o;return n?r.a.createElement(h,l(l({ref:t},c),{},{components:n})):r.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);